AWSTemplateFormatVersion: 2010-09-09

Description: Sets up your AWS Batch Environment for running DRAGEN. (qs-1s1d8j1gr)

Metadata:
  cfn-lint: { config: { ignore_checks: [W9006, W9002, W9003, E3008] } }
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DRAGEN parameters
        Parameters:
          - GenomicsS3Bucket
          - DragenDockerImage
      - Label:
          default: AWS Batch Compute Environment Configuration
        Parameters:
          - VpcId
          - SubnetIds
          - BidPercentage
          - ImageId
          - Ec2KeyPair
          - MinvCpus
          - MaxvCpus
          - DesiredvCpus
          - InstanceType
          - RetryNumber
    ParameterLabels:
      GenomicsS3Bucket:
        default: Genomics Data Bucket
      RetryNumber:
        default: AWS Batch Retry Number
      DragenDockerImage:
        default: Dragen Docker Image
      VpcId:
        default: VPC ID
      SubnetIds:
        default: Subnet Ids
      ImageId:
        default: Image Id
      Ec2KeyPair:
        default: Key Pair
      InstanceType:
        default: Instance Type
      BidPercentage:
        default: Spot Bid Percentage
      MinvCpus:
        default: Min vCPUs
      MaxvCpus:
        default: Max vCPUs
      DesiredvCpus:
        default: Desired vCPUs
      DragenVersion:
        default: Dragen Version

Parameters:
  GenomicsS3Bucket:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription:
      S3 genomics bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: S3 bucket name for the bucket to which you'll read and write genomics data.
    Default: cgl-dragen-results
    Type: String
  DragenDockerImage:
    Type: String
    Description: Path to DRAGEN docker image repository URI.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId containing each of the SubnetIds
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets you want your batch compute environment to launch in. Must be private subnets and in the VPC specified by VpcId.
  BidPercentage:
    AllowedPattern: (?:\b|-)([1-9]{1,2}[0]?|100)\b
    ConstraintDescription: Spot Bid Percentage should be between 1 and 100, inclusive
    Description: The bid percentage set for your AWS Batch Managed Compute Environment with Spot Instances.
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI you want your AWS Batch Managed Compute Environment to use
  Ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Amazon EC2 Key Pair for EC2 instances launched in your compute environment
  MinvCpus:
    Type: String
    Description: Minimum number of CPUs in the compute environment. Default 0.
    Default: 0
    AllowedPattern: "[0-9]+"
  DesiredvCpus:
    Type: String
    Description: Desired number of CPUs in the compute environment to launch with. Default 0.
    Default: 0
    AllowedPattern: "[0-9]+"
  MaxvCpus:
    Type: String
    Description: Maximum number of CPUs in the compute environment. Should be >= than MinCpus
    Default: 128
    AllowedPattern: "[0-9]+"
  RetryNumber:
    Type: String
    Default: "3"
    Description: Number of retries for each AWS Batch job. Integer required.
    MaxLength: 1
    AllowedPattern: (?:\b|-)([1-9]|10)\b
    ConstraintDescription: Value between 1 and 10
  InstanceType:
    AllowedValues:
      - f2.6xlarge
      - f2.12xlarge
    Description: Amazon EC2 instance type for DRAGEN in the AWS Batch Compute Environment.
    Type: String
  DragenVersion:
    Type: String
    Default: "v4-3-6"
    Description: Version of DRAGEN to use in the AWS Batch Compute Environment.
    AllowedPattern: ^v[0-9]+-[0-9]+-[0-9]+$
    ConstraintDescription: Version must be in the format vX-Y-Z, where X, Y, and Z are integers.
  LibDragenSO:
    Type: String
    Default: "/usr/lib64/libdragen.so.4.3.6f"
    Description: The name of the DRAGEN shared object file to be used in the AWS Batch Compute Environment.
    ConstraintDescription: The shared object file is typically in the following path /usr/lib64/libdragen.so.X-Y-Z, where X, Y, and Z are integers.

Conditions:
  Is6xl: !Equals [!Ref InstanceType, "f2.6xlarge"]
  Is12xl: !Equals [!Ref InstanceType, "f2.12xlarge"]

Resources:
  # Batch Setup
  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and all outbound https
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 128.252.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "batch.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBatchServiceRole
  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"
  S3ReadWritePolicyInstance:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadWritePolicyInstance
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3ReadWritePolicyInstance
            Effect: Allow
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${GenomicsS3Bucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${GenomicsS3Bucket}/*"
      Roles:
        - !Ref DragenInstanceRole
  S3ReadWritePolicyJob:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadWritePolicyJob
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3ReadWritePolicyJob
            Effect: Allow
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${GenomicsS3Bucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${GenomicsS3Bucket}/*"
      Roles:
        - !Ref DragenJobRole
  DragenLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref "InstanceType"
        ImageId: !Ref "ImageId"
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
        IamInstanceProfile:
          Name: !Ref "DragenInstanceProfile"
        KeyName: !Ref "Ec2KeyPair"
        TagSpecifications:
          - ResourceType: "instance"
            Tags:
              - Key: "Name"
                Value: "Dragen"
        BlockDeviceMappings:
          - DeviceName: /dev/sdb
            Ebs:
              Encrypted: true
              DeleteOnTermination: true
              VolumeSize: 1250
              VolumeType: gp3
          - DeviceName: /dev/sdc
            Ebs:
              Encrypted: true
              DeleteOnTermination: true
              VolumeSize: 1250
              VolumeType: gp3
          - DeviceName: /dev/sdd
            Ebs:
              Encrypted: true
              DeleteOnTermination: true
              VolumeSize: 1250
              VolumeType: gp3
          - DeviceName: /dev/sde
            Ebs:
              Encrypted: true
              DeleteOnTermination: true
              VolumeSize: 1250
              VolumeType: gp3
        UserData: !Base64
          Fn::Sub: |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash

            log() {
                echo "$(date '+%Y-%m-%d %H:%M:%S') - $@"
            }

            qs_retry() {
                local retries=$1
                shift
                local command="$*"
                local current_try=0
                local backoff_delay=2
                while (( current_try < retries )); do
                    if eval "$command"; then
                        return 0
                    fi
                    log "Retrying... (Attempt $((current_try + 1))/$retries)"
                    sleep $((backoff_delay++))
                    ((current_try++))
                done
                log "ERROR: Tried $retries times and failed!"
                return 1
            }

            RAID_DEVICES=(/dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1 /dev/nvme4n1)
            RAID_NAME="/dev/md0"
            MOUNT_POINT="/staging"

            LOG_FILE="configure-raid.log"
            exec > >(tee -a "${LOG_FILE}") 2> >(tee -a "${LOG_FILE}" >&2)

            log "Stopping ECS agent..."
            qs_retry 10 sudo systemctl stop ecs

            log "Waiting for NVMe devices..."
            for dev in "${RAID_DEVICES[@]}"; do
                qs_retry 10 "[ -e ${dev} ]" || true
            done

            if [ ! -e "${RAID_NAME}" ]; then
                log "Creating RAID0 array..."
                qs_retry 10 sudo mdadm --create "${RAID_NAME}" --level=0 --raid-devices="${#RAID_DEVICES[@]}" "${RAID_DEVICES[@]}" --force
                
                log "Initializing RAID0 array..."
                qs_retry 10 "sudo mkfs.ext4 -F ${RAID_NAME}"
            fi

            log "Updating fstab..."
            UUID="$(sudo blkid -s UUID -o value ${RAID_NAME})"
            qs_retry 10 "echo UUID=${UUID} ${MOUNT_POINT} ext4 defaults,noatime 0 0 | sudo tee -a /etc/fstab"

            log "Mounting RAID0 array..."
            qs_retry 10 "sudo mkdir -p ${MOUNT_POINT}"
            qs_retry 10 "sudo mount -a"
            qs_retry 10 sudo mdadm --detail --scan | sudo tee -a /etc/mdadm.conf
            qs_retry 10 "sudo mkdir -p ${MOUNT_POINT}/tmp ${MOUNT_POINT}/intermediate-results-dir"
            qs_retry 10 "sudo chmod -R 777 ${MOUNT_POINT}"

            log "Setting up Docker..."
            qs_retry 10 "sudo groupadd -f docker"
            qs_retry 10 "sudo usermod -aG docker $(id -un)"
            qs_retry 10 "newgrp docker"

            qs_retry 10 "sudo chown root:docker /var/run/docker.sock"
            qs_retry 10 "sudo chmod 660 /var/run/docker.sock"
            qs_retry 10 "sudo chown -R root:docker /var/lib/docker"
            qs_retry 10 "sudo chmod -R 775 /var/lib/docker"

            qs_retry 10 "sudo systemctl enable docker"
            qs_retry 10 "sudo systemctl start docker"

            log "Moving log file..."
            qs_retry 10 "sudo mv ${LOG_FILE} ${MOUNT_POINT}/${LOG_FILE}"

            log "Changing directory to ${MOUNT_POINT}..."
            qs_retry 10 "cd ${MOUNT_POINT}"

            qs_retry 10 "sudo systemctl start ecs"
            log "ECS and RAID0 array are ready."

            --==BOUNDARY==--

  DragenComputeEnvironmentSpot:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub "dragen-spot_${DragenVersion}"
      ServiceRole: !Ref BatchServiceRole
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        BidPercentage: !Ref BidPercentage
        Ec2KeyPair: !Ref Ec2KeyPair
        ImageId: !Ref ImageId
        InstanceRole: !Ref DragenInstanceRole
        InstanceTypes: [!Ref InstanceType]
        MinvCpus: !Ref MinvCpus
        DesiredvCpus: !Ref DesiredvCpus
        MaxvCpus: !Ref MaxvCpus
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
        SpotIamFleetRole: !Ref SpotFleetRole
        Subnets: !Ref SubnetIds
        Type: SPOT
        LaunchTemplate:
          LaunchTemplateId: !Ref DragenLaunchTemplate
          Version: !GetAtt DragenLaunchTemplate.LatestVersionNumber
  DragenComputeEnvironmentOnDemand:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub "dragen_${DragenVersion}"
      ServiceRole: !Ref BatchServiceRole
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Ec2KeyPair: !Ref Ec2KeyPair
        ImageId: !Ref ImageId
        InstanceRole: !Ref DragenInstanceRole
        InstanceTypes: [!Ref InstanceType]
        MinvCpus: !Ref MinvCpus
        DesiredvCpus: !Ref DesiredvCpus
        MaxvCpus: !Ref MaxvCpus
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
        Subnets: !Ref SubnetIds
        Type: EC2
        AllocationStrategy: BEST_FIT_PROGRESSIVE
        LaunchTemplate:
          LaunchTemplateId: !Ref DragenLaunchTemplate
          Version: !GetAtt DragenLaunchTemplate.LatestVersionNumber

  # DRAGEN set up
  DragenJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  DragenInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  DragenInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DragenInstanceRole
      InstanceProfileName: !Ref DragenInstanceRole
  DragenJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub "dragen-queue_${DragenVersion}"
      Priority: 1
      State: ENABLED
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref DragenComputeEnvironmentOnDemand
        - Order: 2
          ComputeEnvironment: !Ref DragenComputeEnvironmentSpot
  DragenJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "dragen_${DragenVersion}"
      Type: container
      RetryStrategy:
        Attempts: !Ref RetryNumber
      ContainerProperties:
        Image: !Ref DragenDockerImage
        Vcpus: !If [Is6xl, 24, !If [Is12xl, 48, 48]]
        Memory: !If [Is6xl, 256000, !If [Is12xl, 512000, 512000]]
        JobRoleArn: !GetAtt DragenJobRole.Arn
        Privileged: true
        Environment:
          - Name: NXF_CHDIR
            Value: "/staging"
          - Name: NXF_SCRATCH
            Value: "/staging"
          - Name: TMPDIR
            Value: "/staging/tmp"
        MountPoints:
          - ContainerPath: "/opt/edico"
            ReadOnly: False
            SourceVolume: docker_opt_edico
          - ContainerPath: "/var/lib/edico"
            ReadOnly: False
            SourceVolume: docker_var_lib_edico
          - ContainerPath: !Ref LibDragenSO
            ReadOnly: False
            SourceVolume: docker_usr_lib64
          - ContainerPath: "/staging"
            ReadOnly: False
            SourceVolume: docker_staging
          - ContainerPath: "/var/log"
            ReadOnly: False
            SourceVolume: docker_var_log
        Volumes:
          - Name: docker_scratch
            Host:
              SourcePath: "/scratch"
          - Name: docker_ephemeral
            Host:
              SourcePath: "/ephemeral"
          - Name: docker_opt_edico
            Host:
              SourcePath: "/opt/edico"
          - Name: docker_var_lib_edico
            Host:
              SourcePath: "/var/lib/edico"
          - Name: docker_usr_lib64
            Host:
              SourcePath: !Ref LibDragenSO
          - Name: docker_staging
            Host:
              SourcePath: "/staging"
          - Name: docker_var_log
            Host:
              SourcePath: "/var/log"

Outputs:
  DragenComputeEnvironmentSpot:
    Value: !Ref DragenComputeEnvironmentSpot
  DragenComputeEnvironmentOnDemand:
    Value: !Ref DragenComputeEnvironmentOnDemand
  JobQueue:
    Value: !Ref DragenJobQueue
  DragenJobDefinition:
    Value: !Ref DragenJobDefinition
